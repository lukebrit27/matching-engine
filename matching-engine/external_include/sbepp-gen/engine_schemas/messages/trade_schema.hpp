// SPDX-License-Identifier: MIT
// Copyright (c) 2023, Oleksandr Koval

// This file was generated by sbeppc 1.1.0
#pragma once

#include <sbepp/sbepp.hpp>

SBEPP_WARNINGS_OFF();

#include "../schema/schema.hpp"
#include "../types/STRING20.hpp"
#include "../types/STRING4.hpp"
#include "../types/Side.hpp"
#include "../types/messageHeader.hpp"
#include "../types/STRING36.hpp"
#include "../types/UINT32.hpp"
#include "../types/UINT64.hpp"
#include "../types/MessageType.hpp"


namespace engine_schemas
{
namespace detail
{
namespace messages
{



template<typename Byte>
class message_2 : public ::sbepp::detail::message_base<
    Byte, ::engine_schemas::types::messageHeader<Byte>>
{
public:
    using ::sbepp::detail::message_base<
        Byte, ::engine_schemas::types::messageHeader<Byte>>::message_base;
    using ::sbepp::detail::message_base<
        Byte, ::engine_schemas::types::messageHeader<Byte>>::operator();

    SBEPP_CPP20_CONSTEXPR ::engine_schemas::types::MessageType messageType() const noexcept
    {
        return ::sbepp::detail::get_value<
            ::engine_schemas::types::MessageType, ::engine_schemas::types::MessageType::value_type, ::sbepp::endian::little>(*this, 12);
    }

    template<
        typename T = void,
        typename = ::sbepp::detail::enable_if_writable_t<Byte, T>>
    SBEPP_CPP20_CONSTEXPR void messageType(::engine_schemas::types::MessageType v) const noexcept
    {
        ::sbepp::detail::set_value<::sbepp::endian::little>(*this, 12, v.value());
    }
    SBEPP_CPP20_CONSTEXPR ::engine_schemas::types::UINT64 eventTimestamp() const noexcept
    {
        return ::sbepp::detail::get_value<
            ::engine_schemas::types::UINT64, ::engine_schemas::types::UINT64::value_type, ::sbepp::endian::little>(*this, 13);
    }

    template<
        typename T = void,
        typename = ::sbepp::detail::enable_if_writable_t<Byte, T>>
    SBEPP_CPP20_CONSTEXPR void eventTimestamp(::engine_schemas::types::UINT64 v) const noexcept
    {
        ::sbepp::detail::set_value<::sbepp::endian::little>(*this, 13, v.value());
    }
    SBEPP_CPP20_CONSTEXPR ::engine_schemas::types::UINT32 price() const noexcept
    {
        return ::sbepp::detail::get_value<
            ::engine_schemas::types::UINT32, ::engine_schemas::types::UINT32::value_type, ::sbepp::endian::little>(*this, 21);
    }

    template<
        typename T = void,
        typename = ::sbepp::detail::enable_if_writable_t<Byte, T>>
    SBEPP_CPP20_CONSTEXPR void price(::engine_schemas::types::UINT32 v) const noexcept
    {
        ::sbepp::detail::set_value<::sbepp::endian::little>(*this, 21, v.value());
    }
    SBEPP_CPP20_CONSTEXPR ::engine_schemas::types::UINT32 quantity() const noexcept
    {
        return ::sbepp::detail::get_value<
            ::engine_schemas::types::UINT32, ::engine_schemas::types::UINT32::value_type, ::sbepp::endian::little>(*this, 25);
    }

    template<
        typename T = void,
        typename = ::sbepp::detail::enable_if_writable_t<Byte, T>>
    SBEPP_CPP20_CONSTEXPR void quantity(::engine_schemas::types::UINT32 v) const noexcept
    {
        ::sbepp::detail::set_value<::sbepp::endian::little>(*this, 25, v.value());
    }
    SBEPP_CPP20_CONSTEXPR ::engine_schemas::types::Side side() const noexcept
    {
        return ::sbepp::detail::get_value<
            ::engine_schemas::types::Side, ::engine_schemas::types::Side, ::sbepp::endian::little>(*this, 29);
    }

    template<
        typename T = void,
        typename = ::sbepp::detail::enable_if_writable_t<Byte, T>>
    SBEPP_CPP20_CONSTEXPR void side(::engine_schemas::types::Side v) const noexcept
    {
        ::sbepp::detail::set_value<::sbepp::endian::little>(*this, 29, v);
    }
    constexpr ::engine_schemas::types::STRING36<Byte> tradeID() const noexcept
    {
        return ::sbepp::detail::get_static_field_view<::engine_schemas::types::STRING36<Byte>>(
            *this, 30);
    }
    constexpr ::engine_schemas::types::STRING4<Byte> instrumentID() const noexcept
    {
        return ::sbepp::detail::get_static_field_view<::engine_schemas::types::STRING4<Byte>>(
            *this, 66);
    }
    constexpr ::engine_schemas::types::STRING36<Byte> buyOrderID() const noexcept
    {
        return ::sbepp::detail::get_static_field_view<::engine_schemas::types::STRING36<Byte>>(
            *this, 70);
    }
    constexpr ::engine_schemas::types::STRING36<Byte> sellOrderID() const noexcept
    {
        return ::sbepp::detail::get_static_field_view<::engine_schemas::types::STRING36<Byte>>(
            *this, 106);
    }
    constexpr ::engine_schemas::types::STRING20<Byte> buyTrader() const noexcept
    {
        return ::sbepp::detail::get_static_field_view<::engine_schemas::types::STRING20<Byte>>(
            *this, 142);
    }
    constexpr ::engine_schemas::types::STRING20<Byte> sellTrader() const noexcept
    {
        return ::sbepp::detail::get_static_field_view<::engine_schemas::types::STRING20<Byte>>(
            *this, 162);
    }

    template<
        typename Cursor,
        typename = ::sbepp::detail::enable_if_cursor_compatible_t<
            Byte, ::sbepp::detail::cursor_byte_type_t<Cursor>>>
    SBEPP_CPP20_CONSTEXPR auto
        messageType(Cursor&& c) const noexcept
            -> ::sbepp::detail::cursor_result_type_t<Cursor, ::engine_schemas::types::MessageType>
    {
        return c.template get_value<::engine_schemas::types::MessageType, char, ::sbepp::endian::little>(
            *this, 0, 12);
    }

    template<
        typename Cursor,
        typename = ::sbepp::detail::enable_if_cursor_writeable_t<
            Byte, ::sbepp::detail::cursor_byte_type_t<Cursor>>>
    SBEPP_CPP20_CONSTEXPR void messageType(
        ::engine_schemas::types::MessageType v, Cursor&& c) const noexcept
    {
        return c.template set_value<::sbepp::endian::little>(
            *this, 0, 12, v.value());
    }

    template<
        typename Cursor,
        typename = ::sbepp::detail::enable_if_cursor_compatible_t<
            Byte, ::sbepp::detail::cursor_byte_type_t<Cursor>>>
    SBEPP_CPP20_CONSTEXPR auto
        eventTimestamp(Cursor&& c) const noexcept
            -> ::sbepp::detail::cursor_result_type_t<Cursor, ::engine_schemas::types::UINT64>
    {
        return c.template get_value<::engine_schemas::types::UINT64, ::std::uint64_t, ::sbepp::endian::little>(
            *this, 0, 13);
    }

    template<
        typename Cursor,
        typename = ::sbepp::detail::enable_if_cursor_writeable_t<
            Byte, ::sbepp::detail::cursor_byte_type_t<Cursor>>>
    SBEPP_CPP20_CONSTEXPR void eventTimestamp(
        ::engine_schemas::types::UINT64 v, Cursor&& c) const noexcept
    {
        return c.template set_value<::sbepp::endian::little>(
            *this, 0, 13, v.value());
    }

    template<
        typename Cursor,
        typename = ::sbepp::detail::enable_if_cursor_compatible_t<
            Byte, ::sbepp::detail::cursor_byte_type_t<Cursor>>>
    SBEPP_CPP20_CONSTEXPR auto
        price(Cursor&& c) const noexcept
            -> ::sbepp::detail::cursor_result_type_t<Cursor, ::engine_schemas::types::UINT32>
    {
        return c.template get_value<::engine_schemas::types::UINT32, ::std::uint32_t, ::sbepp::endian::little>(
            *this, 0, 21);
    }

    template<
        typename Cursor,
        typename = ::sbepp::detail::enable_if_cursor_writeable_t<
            Byte, ::sbepp::detail::cursor_byte_type_t<Cursor>>>
    SBEPP_CPP20_CONSTEXPR void price(
        ::engine_schemas::types::UINT32 v, Cursor&& c) const noexcept
    {
        return c.template set_value<::sbepp::endian::little>(
            *this, 0, 21, v.value());
    }

    template<
        typename Cursor,
        typename = ::sbepp::detail::enable_if_cursor_compatible_t<
            Byte, ::sbepp::detail::cursor_byte_type_t<Cursor>>>
    SBEPP_CPP20_CONSTEXPR auto
        quantity(Cursor&& c) const noexcept
            -> ::sbepp::detail::cursor_result_type_t<Cursor, ::engine_schemas::types::UINT32>
    {
        return c.template get_value<::engine_schemas::types::UINT32, ::std::uint32_t, ::sbepp::endian::little>(
            *this, 0, 25);
    }

    template<
        typename Cursor,
        typename = ::sbepp::detail::enable_if_cursor_writeable_t<
            Byte, ::sbepp::detail::cursor_byte_type_t<Cursor>>>
    SBEPP_CPP20_CONSTEXPR void quantity(
        ::engine_schemas::types::UINT32 v, Cursor&& c) const noexcept
    {
        return c.template set_value<::sbepp::endian::little>(
            *this, 0, 25, v.value());
    }

    template<
        typename Cursor,
        typename = ::sbepp::detail::enable_if_cursor_compatible_t<
            Byte, ::sbepp::detail::cursor_byte_type_t<Cursor>>>
    SBEPP_CPP20_CONSTEXPR auto
        side(Cursor&& c) const noexcept
        -> ::sbepp::detail::cursor_result_type_t<Cursor, ::engine_schemas::types::Side>
    {
        return c.template get_value<::engine_schemas::types::Side, ::engine_schemas::types::Side, ::sbepp::endian::little>(
            *this, 0, 29);
    }

    template<
        typename Cursor,
        typename = ::sbepp::detail::enable_if_cursor_writeable_t<
            Byte, ::sbepp::detail::cursor_byte_type_t<Cursor>>>
    SBEPP_CPP20_CONSTEXPR void side(
        ::engine_schemas::types::Side v, Cursor&& c) const noexcept
    {
        return c.template set_value<::sbepp::endian::little>(
            *this, 0, 29, v);
    }

    template<
        typename Cursor,
        typename = ::sbepp::detail::enable_if_cursor_compatible_t<
            Byte, ::sbepp::detail::cursor_byte_type_t<Cursor>>>
    SBEPP_CPP20_CONSTEXPR auto
        tradeID(Cursor&& c) const noexcept
        -> ::sbepp::detail::cursor_result_type_t<Cursor, ::engine_schemas::types::STRING36<
            ::sbepp::detail::cursor_byte_type_t<Cursor>>>
    {
        return c.template get_static_field_view<::engine_schemas::types::STRING36<
            ::sbepp::detail::cursor_byte_type_t<Cursor>>>(
                *this, 0, 30);
    }

    template<
        typename Cursor,
        typename = ::sbepp::detail::enable_if_cursor_compatible_t<
            Byte, ::sbepp::detail::cursor_byte_type_t<Cursor>>>
    SBEPP_CPP20_CONSTEXPR auto
        instrumentID(Cursor&& c) const noexcept
        -> ::sbepp::detail::cursor_result_type_t<Cursor, ::engine_schemas::types::STRING4<
            ::sbepp::detail::cursor_byte_type_t<Cursor>>>
    {
        return c.template get_static_field_view<::engine_schemas::types::STRING4<
            ::sbepp::detail::cursor_byte_type_t<Cursor>>>(
                *this, 0, 66);
    }

    template<
        typename Cursor,
        typename = ::sbepp::detail::enable_if_cursor_compatible_t<
            Byte, ::sbepp::detail::cursor_byte_type_t<Cursor>>>
    SBEPP_CPP20_CONSTEXPR auto
        buyOrderID(Cursor&& c) const noexcept
        -> ::sbepp::detail::cursor_result_type_t<Cursor, ::engine_schemas::types::STRING36<
            ::sbepp::detail::cursor_byte_type_t<Cursor>>>
    {
        return c.template get_static_field_view<::engine_schemas::types::STRING36<
            ::sbepp::detail::cursor_byte_type_t<Cursor>>>(
                *this, 0, 70);
    }

    template<
        typename Cursor,
        typename = ::sbepp::detail::enable_if_cursor_compatible_t<
            Byte, ::sbepp::detail::cursor_byte_type_t<Cursor>>>
    SBEPP_CPP20_CONSTEXPR auto
        sellOrderID(Cursor&& c) const noexcept
        -> ::sbepp::detail::cursor_result_type_t<Cursor, ::engine_schemas::types::STRING36<
            ::sbepp::detail::cursor_byte_type_t<Cursor>>>
    {
        return c.template get_static_field_view<::engine_schemas::types::STRING36<
            ::sbepp::detail::cursor_byte_type_t<Cursor>>>(
                *this, 0, 106);
    }

    template<
        typename Cursor,
        typename = ::sbepp::detail::enable_if_cursor_compatible_t<
            Byte, ::sbepp::detail::cursor_byte_type_t<Cursor>>>
    SBEPP_CPP20_CONSTEXPR auto
        buyTrader(Cursor&& c) const noexcept
        -> ::sbepp::detail::cursor_result_type_t<Cursor, ::engine_schemas::types::STRING20<
            ::sbepp::detail::cursor_byte_type_t<Cursor>>>
    {
        return c.template get_static_field_view<::engine_schemas::types::STRING20<
            ::sbepp::detail::cursor_byte_type_t<Cursor>>>(
                *this, 0, 142);
    }

    template<
        typename Cursor,
        typename = ::sbepp::detail::enable_if_cursor_compatible_t<
            Byte, ::sbepp::detail::cursor_byte_type_t<Cursor>>>
    SBEPP_CPP20_CONSTEXPR auto sellTrader(Cursor&& c) const noexcept
        -> ::sbepp::detail::cursor_result_type_t<Cursor,
            ::engine_schemas::types::STRING20<::sbepp::detail::cursor_byte_type_t<Cursor>>>
    {
        return c.template get_last_static_field_view<::engine_schemas::types::STRING20<::sbepp::detail::cursor_byte_type_t<Cursor>>>(
            *this, 0, 162);
    }


    template<
        typename T = void,
        typename = ::sbepp::detail::enable_if_writable_t<Byte, T>>
    SBEPP_CPP14_CONSTEXPR ::engine_schemas::types::messageHeader<Byte>
        operator()(::sbepp::detail::fill_message_header_tag) const noexcept
    {
        auto header = operator()(::sbepp::detail::get_header_tag{});
        header.schemaId({1});
        header.templateId({2});
        header.version({0});
        header.blockLength({170});
        header.numGroups({0});

        header.numVarDataFields({0});

        return header;
    }


    SBEPP_CPP20_CONSTEXPR std::size_t operator()(
        ::sbepp::detail::size_bytes_tag) const noexcept
    {
        return 12 + (*this)(::sbepp::detail::get_block_length_tag{});
    }


    template<typename Visitor, typename Cursor>
    SBEPP_CPP14_CONSTEXPR void operator()(
        ::sbepp::detail::visit_tag, Visitor& v, Cursor& c)
    {
        v.template on_message(*this, c, ::engine_schemas::schema::messages::trade_schema{});
    }


    template<typename Visitor, typename Cursor>
    SBEPP_CPP14_CONSTEXPR bool operator()(
        ::sbepp::detail::visit_children_tag, Visitor& v, Cursor& c)
    {
        (void)v;
        (void)c;
        return v.template on_field(this->messageType(c), ::engine_schemas::schema::messages::trade_schema::messageType{})
||v.template on_field(this->eventTimestamp(c), ::engine_schemas::schema::messages::trade_schema::eventTimestamp{})
||v.template on_field(this->price(c), ::engine_schemas::schema::messages::trade_schema::price{})
||v.template on_field(this->quantity(c), ::engine_schemas::schema::messages::trade_schema::quantity{})
||v.template on_field(this->side(c), ::engine_schemas::schema::messages::trade_schema::side{})
||v.template on_field(this->tradeID(c), ::engine_schemas::schema::messages::trade_schema::tradeID{})
||v.template on_field(this->instrumentID(c), ::engine_schemas::schema::messages::trade_schema::instrumentID{})
||v.template on_field(this->buyOrderID(c), ::engine_schemas::schema::messages::trade_schema::buyOrderID{})
||v.template on_field(this->sellOrderID(c), ::engine_schemas::schema::messages::trade_schema::sellOrderID{})
||v.template on_field(this->buyTrader(c), ::engine_schemas::schema::messages::trade_schema::buyTrader{})
||v.template on_field(this->sellTrader(c), ::engine_schemas::schema::messages::trade_schema::sellTrader{});
    }

};

} // namespace messages
} // namespace detail

namespace messages
{

    template<typename Byte>
    using trade_schema = ::engine_schemas::detail::messages::message_2<Byte>;

} // namespace messages
} // namespace engine_schemas

namespace sbepp
{

template<>
class message_traits<::engine_schemas::schema::messages::trade_schema>
{
public:
    static constexpr const char* name() noexcept
    {
        return "trade_schema";
    }

    static constexpr const char* description() noexcept
    {
        return "";
    }

    static constexpr message_id_t id() noexcept
    {
        return 2;
    }

    static constexpr block_length_t block_length() noexcept
    {
        return 170;
    }

    static constexpr const char* semantic_type() noexcept
    {
        return "";
    }

    static constexpr version_t since_version() noexcept
    {
        return 0;
    }

    
    
    template<typename Byte>
    using value_type = ::engine_schemas::messages::trade_schema<Byte>;

};

template<>
class field_traits<::engine_schemas::schema::messages::trade_schema::messageType>
{
public:
    static constexpr const char* name() noexcept
    {
        return "messageType";
    }

    static constexpr member_id_t id() noexcept
    {
        return 1;
    }

    static constexpr const char* description() noexcept
    {
        return "";
    }

    static constexpr field_presence presence() noexcept
    {
        return ::sbepp::field_presence::required;
    }
    
    static constexpr offset_t offset() noexcept
    {
        return {0};
    }


    static constexpr version_t since_version() noexcept
    {
        return 0;
    }

    
    using value_type = ::engine_schemas::types::MessageType;
    using value_type_tag = ::engine_schemas::schema::types::MessageType;
};

template<>
class field_traits<::engine_schemas::schema::messages::trade_schema::eventTimestamp>
{
public:
    static constexpr const char* name() noexcept
    {
        return "eventTimestamp";
    }

    static constexpr member_id_t id() noexcept
    {
        return 2;
    }

    static constexpr const char* description() noexcept
    {
        return "";
    }

    static constexpr field_presence presence() noexcept
    {
        return ::sbepp::field_presence::required;
    }
    
    static constexpr offset_t offset() noexcept
    {
        return {1};
    }


    static constexpr version_t since_version() noexcept
    {
        return 0;
    }

    
    using value_type = ::engine_schemas::types::UINT64;
    using value_type_tag = ::engine_schemas::schema::types::UINT64;
};

template<>
class field_traits<::engine_schemas::schema::messages::trade_schema::price>
{
public:
    static constexpr const char* name() noexcept
    {
        return "price";
    }

    static constexpr member_id_t id() noexcept
    {
        return 3;
    }

    static constexpr const char* description() noexcept
    {
        return "";
    }

    static constexpr field_presence presence() noexcept
    {
        return ::sbepp::field_presence::required;
    }
    
    static constexpr offset_t offset() noexcept
    {
        return {9};
    }


    static constexpr version_t since_version() noexcept
    {
        return 0;
    }

    
    using value_type = ::engine_schemas::types::UINT32;
    using value_type_tag = ::engine_schemas::schema::types::UINT32;
};

template<>
class field_traits<::engine_schemas::schema::messages::trade_schema::quantity>
{
public:
    static constexpr const char* name() noexcept
    {
        return "quantity";
    }

    static constexpr member_id_t id() noexcept
    {
        return 4;
    }

    static constexpr const char* description() noexcept
    {
        return "";
    }

    static constexpr field_presence presence() noexcept
    {
        return ::sbepp::field_presence::required;
    }
    
    static constexpr offset_t offset() noexcept
    {
        return {13};
    }


    static constexpr version_t since_version() noexcept
    {
        return 0;
    }

    
    using value_type = ::engine_schemas::types::UINT32;
    using value_type_tag = ::engine_schemas::schema::types::UINT32;
};

template<>
class field_traits<::engine_schemas::schema::messages::trade_schema::side>
{
public:
    static constexpr const char* name() noexcept
    {
        return "side";
    }

    static constexpr member_id_t id() noexcept
    {
        return 5;
    }

    static constexpr const char* description() noexcept
    {
        return "";
    }

    static constexpr field_presence presence() noexcept
    {
        return ::sbepp::field_presence::required;
    }
    
    static constexpr offset_t offset() noexcept
    {
        return {17};
    }


    static constexpr version_t since_version() noexcept
    {
        return 0;
    }

    
    using value_type = ::engine_schemas::types::Side;
    using value_type_tag = ::engine_schemas::schema::types::Side;
};

template<>
class field_traits<::engine_schemas::schema::messages::trade_schema::tradeID>
{
public:
    static constexpr const char* name() noexcept
    {
        return "tradeID";
    }

    static constexpr member_id_t id() noexcept
    {
        return 6;
    }

    static constexpr const char* description() noexcept
    {
        return "";
    }

    static constexpr field_presence presence() noexcept
    {
        return ::sbepp::field_presence::required;
    }
    
    static constexpr offset_t offset() noexcept
    {
        return {18};
    }


    static constexpr version_t since_version() noexcept
    {
        return 0;
    }

    
    
    template<typename Byte>
    using value_type = ::engine_schemas::types::STRING36<Byte>;

    using value_type_tag = ::engine_schemas::schema::types::STRING36;
};

template<>
class field_traits<::engine_schemas::schema::messages::trade_schema::instrumentID>
{
public:
    static constexpr const char* name() noexcept
    {
        return "instrumentID";
    }

    static constexpr member_id_t id() noexcept
    {
        return 7;
    }

    static constexpr const char* description() noexcept
    {
        return "";
    }

    static constexpr field_presence presence() noexcept
    {
        return ::sbepp::field_presence::required;
    }
    
    static constexpr offset_t offset() noexcept
    {
        return {54};
    }


    static constexpr version_t since_version() noexcept
    {
        return 0;
    }

    
    
    template<typename Byte>
    using value_type = ::engine_schemas::types::STRING4<Byte>;

    using value_type_tag = ::engine_schemas::schema::types::STRING4;
};

template<>
class field_traits<::engine_schemas::schema::messages::trade_schema::buyOrderID>
{
public:
    static constexpr const char* name() noexcept
    {
        return "buyOrderID";
    }

    static constexpr member_id_t id() noexcept
    {
        return 8;
    }

    static constexpr const char* description() noexcept
    {
        return "";
    }

    static constexpr field_presence presence() noexcept
    {
        return ::sbepp::field_presence::required;
    }
    
    static constexpr offset_t offset() noexcept
    {
        return {58};
    }


    static constexpr version_t since_version() noexcept
    {
        return 0;
    }

    
    
    template<typename Byte>
    using value_type = ::engine_schemas::types::STRING36<Byte>;

    using value_type_tag = ::engine_schemas::schema::types::STRING36;
};

template<>
class field_traits<::engine_schemas::schema::messages::trade_schema::sellOrderID>
{
public:
    static constexpr const char* name() noexcept
    {
        return "sellOrderID";
    }

    static constexpr member_id_t id() noexcept
    {
        return 9;
    }

    static constexpr const char* description() noexcept
    {
        return "";
    }

    static constexpr field_presence presence() noexcept
    {
        return ::sbepp::field_presence::required;
    }
    
    static constexpr offset_t offset() noexcept
    {
        return {94};
    }


    static constexpr version_t since_version() noexcept
    {
        return 0;
    }

    
    
    template<typename Byte>
    using value_type = ::engine_schemas::types::STRING36<Byte>;

    using value_type_tag = ::engine_schemas::schema::types::STRING36;
};

template<>
class field_traits<::engine_schemas::schema::messages::trade_schema::buyTrader>
{
public:
    static constexpr const char* name() noexcept
    {
        return "buyTrader";
    }

    static constexpr member_id_t id() noexcept
    {
        return 10;
    }

    static constexpr const char* description() noexcept
    {
        return "";
    }

    static constexpr field_presence presence() noexcept
    {
        return ::sbepp::field_presence::required;
    }
    
    static constexpr offset_t offset() noexcept
    {
        return {130};
    }


    static constexpr version_t since_version() noexcept
    {
        return 0;
    }

    
    
    template<typename Byte>
    using value_type = ::engine_schemas::types::STRING20<Byte>;

    using value_type_tag = ::engine_schemas::schema::types::STRING20;
};

template<>
class field_traits<::engine_schemas::schema::messages::trade_schema::sellTrader>
{
public:
    static constexpr const char* name() noexcept
    {
        return "sellTrader";
    }

    static constexpr member_id_t id() noexcept
    {
        return 11;
    }

    static constexpr const char* description() noexcept
    {
        return "";
    }

    static constexpr field_presence presence() noexcept
    {
        return ::sbepp::field_presence::required;
    }
    
    static constexpr offset_t offset() noexcept
    {
        return {150};
    }


    static constexpr version_t since_version() noexcept
    {
        return 0;
    }

    
    
    template<typename Byte>
    using value_type = ::engine_schemas::types::STRING20<Byte>;

    using value_type_tag = ::engine_schemas::schema::types::STRING20;
};

}  // namespace sbepp

SBEPP_WARNINGS_ON();
