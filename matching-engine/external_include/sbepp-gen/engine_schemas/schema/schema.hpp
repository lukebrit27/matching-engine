// SPDX-License-Identifier: MIT
// Copyright (c) 2023, Oleksandr Koval

// This file was generated by sbeppc 1.1.0
#pragma once

#include <sbepp/sbepp.hpp>

SBEPP_WARNINGS_OFF();

namespace engine_schemas
{
namespace detail
{
namespace schema
{
struct enum_1
{
    struct newo{};
    struct cancelled{};
    struct partiallyFilled{};
    struct filled{};

};
struct enum_2
{
    struct buy{};
    struct sell{};

};
struct type_1{};
struct enum_3
{
    struct limit{};
    struct market{};

};
struct type_2{};
struct type_3{};
struct type_4{};
struct type_5{};
struct type_6{};
struct type_7{};
struct type_8{};
struct type_9{};
struct type_10{};
struct type_11{};
struct type_12{};
struct composite_1
{
using blockLength = ::engine_schemas::detail::schema::type_7;
using templateId = ::engine_schemas::detail::schema::type_8;
using schemaId = ::engine_schemas::detail::schema::type_9;
using version = ::engine_schemas::detail::schema::type_10;
using numGroups = ::engine_schemas::detail::schema::type_11;
using numVarDataFields = ::engine_schemas::detail::schema::type_12;

};
struct message_1
{
    struct messageType{};
    struct eventTimestamp{};
    struct price{};
    struct quantity{};
    struct leavesQuantity{};
    struct side{};
    struct orderID{};
    struct orderType{};
    struct orderStatus{};
    struct instrumentID{};
    struct trader{};

};
struct message_2
{
    struct messageType{};
    struct eventTimestamp{};
    struct price{};
    struct quantity{};
    struct side{};
    struct tradeID{};
    struct instrumentID{};
    struct buyOrderID{};
    struct sellOrderID{};
    struct buyTrader{};
    struct sellTrader{};

};


struct types_0
{
    using OrderStatus = ::engine_schemas::detail::schema::enum_1;
    using Side = ::engine_schemas::detail::schema::enum_2;
    using MessageType = ::engine_schemas::detail::schema::type_1;
    using OrderType = ::engine_schemas::detail::schema::enum_3;
    using STRING36 = ::engine_schemas::detail::schema::type_2;
    using STRING20 = ::engine_schemas::detail::schema::type_3;
    using STRING4 = ::engine_schemas::detail::schema::type_4;
    using UINT32 = ::engine_schemas::detail::schema::type_5;
    using UINT64 = ::engine_schemas::detail::schema::type_6;
    using messageHeader = ::engine_schemas::detail::schema::composite_1;

};

struct messages_0
{
    using order_schema = ::engine_schemas::detail::schema::message_1;
    using trade_schema = ::engine_schemas::detail::schema::message_2;

};
} // namespace schema
} // namespace detail

struct schema
{
    using types = ::engine_schemas::detail::schema::types_0;
    using messages = ::engine_schemas::detail::schema::messages_0;
};


namespace detail
{
namespace types
{
template<typename Byte>
class composite_1;
} // namespace types
} // namespace detail
} // namespace engine_schemas

namespace sbepp
{

template<>
class schema_traits<::engine_schemas::schema>
{
public:
    static constexpr const char* package() noexcept
    {
        return "engine_schemas";
    }

    static constexpr schema_id_t id() noexcept
    {
        return 1;
    }

    static constexpr version_t version() noexcept
    {
        return 0;
    }

    static constexpr const char* semantic_version() noexcept
    {
        return "";
    }

    static constexpr endian byte_order() noexcept
    {
        return ::sbepp::endian::little;
    }

    static constexpr const char* description() noexcept
    {
        return "";
    }

    
    template<typename Byte>
    using header_type = ::engine_schemas::detail::types::composite_1<Byte>;

    using header_type_tag = ::engine_schemas::schema::types::messageHeader;
};

}  // namespace sbepp

SBEPP_WARNINGS_ON();
