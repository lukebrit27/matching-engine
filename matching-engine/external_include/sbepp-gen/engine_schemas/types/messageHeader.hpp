// SPDX-License-Identifier: MIT
// Copyright (c) 2023, Oleksandr Koval

// This file was generated by sbeppc 1.1.0
#pragma once

#include <sbepp/sbepp.hpp>

SBEPP_WARNINGS_OFF();

#include "../schema/schema.hpp"


namespace engine_schemas
{
namespace detail
{
namespace types
{


class type_6
    : public ::sbepp::detail::required_base<::std::uint16_t, type_6>
{
public:
    using ::sbepp::detail::required_base<
        ::std::uint16_t, type_6>::required_base;

    static constexpr value_type min_value() noexcept
    {
        return {0};
    }

    static constexpr value_type max_value() noexcept
    {
        return {65534};
    }
};

class type_7
    : public ::sbepp::detail::required_base<::std::uint16_t, type_7>
{
public:
    using ::sbepp::detail::required_base<
        ::std::uint16_t, type_7>::required_base;

    static constexpr value_type min_value() noexcept
    {
        return {0};
    }

    static constexpr value_type max_value() noexcept
    {
        return {65534};
    }
};

class type_8
    : public ::sbepp::detail::required_base<::std::uint16_t, type_8>
{
public:
    using ::sbepp::detail::required_base<
        ::std::uint16_t, type_8>::required_base;

    static constexpr value_type min_value() noexcept
    {
        return {0};
    }

    static constexpr value_type max_value() noexcept
    {
        return {65534};
    }
};

class type_9
    : public ::sbepp::detail::required_base<::std::uint16_t, type_9>
{
public:
    using ::sbepp::detail::required_base<
        ::std::uint16_t, type_9>::required_base;

    static constexpr value_type min_value() noexcept
    {
        return {0};
    }

    static constexpr value_type max_value() noexcept
    {
        return {65534};
    }
};

class type_10
    : public ::sbepp::detail::required_base<::std::uint16_t, type_10>
{
public:
    using ::sbepp::detail::required_base<
        ::std::uint16_t, type_10>::required_base;

    static constexpr value_type min_value() noexcept
    {
        return {0};
    }

    static constexpr value_type max_value() noexcept
    {
        return {65534};
    }
};

class type_11
    : public ::sbepp::detail::required_base<::std::uint16_t, type_11>
{
public:
    using ::sbepp::detail::required_base<
        ::std::uint16_t, type_11>::required_base;

    static constexpr value_type min_value() noexcept
    {
        return {0};
    }

    static constexpr value_type max_value() noexcept
    {
        return {65534};
    }
};


template<typename Byte>
class composite_1 : public ::sbepp::detail::composite_base<Byte>
{
public:
    using ::sbepp::detail::composite_base<Byte>::composite_base;
    using ::sbepp::detail::composite_base<Byte>::operator();

    SBEPP_CPP20_CONSTEXPR ::engine_schemas::detail::types::type_6 blockLength() const noexcept
    {
        return ::sbepp::detail::get_value<
            ::engine_schemas::detail::types::type_6, ::engine_schemas::detail::types::type_6::value_type, ::sbepp::endian::little>(*this, 0);
    }

    template<
        typename T = void,
        typename = ::sbepp::detail::enable_if_writable_t<Byte, T>>
    SBEPP_CPP20_CONSTEXPR void blockLength(::engine_schemas::detail::types::type_6 v) const noexcept
    {
        ::sbepp::detail::set_value<::sbepp::endian::little>(*this, 0, v.value());
    }
    SBEPP_CPP20_CONSTEXPR ::engine_schemas::detail::types::type_7 templateId() const noexcept
    {
        return ::sbepp::detail::get_value<
            ::engine_schemas::detail::types::type_7, ::engine_schemas::detail::types::type_7::value_type, ::sbepp::endian::little>(*this, 2);
    }

    template<
        typename T = void,
        typename = ::sbepp::detail::enable_if_writable_t<Byte, T>>
    SBEPP_CPP20_CONSTEXPR void templateId(::engine_schemas::detail::types::type_7 v) const noexcept
    {
        ::sbepp::detail::set_value<::sbepp::endian::little>(*this, 2, v.value());
    }
    SBEPP_CPP20_CONSTEXPR ::engine_schemas::detail::types::type_8 schemaId() const noexcept
    {
        return ::sbepp::detail::get_value<
            ::engine_schemas::detail::types::type_8, ::engine_schemas::detail::types::type_8::value_type, ::sbepp::endian::little>(*this, 4);
    }

    template<
        typename T = void,
        typename = ::sbepp::detail::enable_if_writable_t<Byte, T>>
    SBEPP_CPP20_CONSTEXPR void schemaId(::engine_schemas::detail::types::type_8 v) const noexcept
    {
        ::sbepp::detail::set_value<::sbepp::endian::little>(*this, 4, v.value());
    }
    SBEPP_CPP20_CONSTEXPR ::engine_schemas::detail::types::type_9 version() const noexcept
    {
        return ::sbepp::detail::get_value<
            ::engine_schemas::detail::types::type_9, ::engine_schemas::detail::types::type_9::value_type, ::sbepp::endian::little>(*this, 6);
    }

    template<
        typename T = void,
        typename = ::sbepp::detail::enable_if_writable_t<Byte, T>>
    SBEPP_CPP20_CONSTEXPR void version(::engine_schemas::detail::types::type_9 v) const noexcept
    {
        ::sbepp::detail::set_value<::sbepp::endian::little>(*this, 6, v.value());
    }
    SBEPP_CPP20_CONSTEXPR ::engine_schemas::detail::types::type_10 numGroups() const noexcept
    {
        return ::sbepp::detail::get_value<
            ::engine_schemas::detail::types::type_10, ::engine_schemas::detail::types::type_10::value_type, ::sbepp::endian::little>(*this, 8);
    }

    template<
        typename T = void,
        typename = ::sbepp::detail::enable_if_writable_t<Byte, T>>
    SBEPP_CPP20_CONSTEXPR void numGroups(::engine_schemas::detail::types::type_10 v) const noexcept
    {
        ::sbepp::detail::set_value<::sbepp::endian::little>(*this, 8, v.value());
    }
    SBEPP_CPP20_CONSTEXPR ::engine_schemas::detail::types::type_11 numVarDataFields() const noexcept
    {
        return ::sbepp::detail::get_value<
            ::engine_schemas::detail::types::type_11, ::engine_schemas::detail::types::type_11::value_type, ::sbepp::endian::little>(*this, 10);
    }

    template<
        typename T = void,
        typename = ::sbepp::detail::enable_if_writable_t<Byte, T>>
    SBEPP_CPP20_CONSTEXPR void numVarDataFields(::engine_schemas::detail::types::type_11 v) const noexcept
    {
        ::sbepp::detail::set_value<::sbepp::endian::little>(*this, 10, v.value());
    }


    SBEPP_CPP20_CONSTEXPR std::size_t
        operator()(::sbepp::detail::size_bytes_tag) const noexcept
    {
        return 12;
    }

    template<typename Visitor, typename Cursor>
    SBEPP_CPP14_CONSTEXPR bool operator()(
        ::sbepp::detail::visit_tag, Visitor& v, Cursor&)
    {
        return v.template on_composite(*this, ::engine_schemas::schema::types::messageHeader{});
    }


    template<typename Visitor, typename Cursor>
    SBEPP_CPP14_CONSTEXPR bool operator()(
        ::sbepp::detail::visit_children_tag, Visitor& v, Cursor&)
    {
        (void)v;
        return v.template on_type(this->blockLength(), ::engine_schemas::schema::types::messageHeader::blockLength{})
||v.template on_type(this->templateId(), ::engine_schemas::schema::types::messageHeader::templateId{})
||v.template on_type(this->schemaId(), ::engine_schemas::schema::types::messageHeader::schemaId{})
||v.template on_type(this->version(), ::engine_schemas::schema::types::messageHeader::version{})
||v.template on_type(this->numGroups(), ::engine_schemas::schema::types::messageHeader::numGroups{})
||v.template on_type(this->numVarDataFields(), ::engine_schemas::schema::types::messageHeader::numVarDataFields{});
    }

};

} // namespace types
} // namespace detail

namespace types
{

    template<typename Byte>
    using messageHeader = ::engine_schemas::detail::types::composite_1<Byte>;

} // namespace types
} // namespace engine_schemas

namespace sbepp
{

template<>
class type_traits<::engine_schemas::schema::types::messageHeader::blockLength>
{
public:
    static constexpr const char* name() noexcept
    {
        return "blockLength";
    }

    static constexpr const char* description() noexcept
    {
        return "";
    }

    static constexpr field_presence presence() noexcept
    {
        return ::sbepp::field_presence::required;
    }

    using primitive_type = ::std::uint16_t;
    
    static constexpr primitive_type min_value() noexcept
    {
        return value_type::min_value();
    }
    
    static constexpr primitive_type max_value() noexcept
    {
        return value_type::max_value();
    }

    
    static constexpr length_t length() noexcept
    {
        return 1;
    }
    
    static constexpr offset_t offset() noexcept
    {
        return {0};
    }

    
    static constexpr const char* semantic_type() noexcept
    {
        return "";
    }
    
    static constexpr version_t since_version() noexcept
    {
        return 0;
    }

    static constexpr const char* character_encoding() noexcept
    {
        return "";
    }

    
    using value_type = ::engine_schemas::detail::types::type_6;
};

template<>
class type_traits<::engine_schemas::schema::types::messageHeader::templateId>
{
public:
    static constexpr const char* name() noexcept
    {
        return "templateId";
    }

    static constexpr const char* description() noexcept
    {
        return "";
    }

    static constexpr field_presence presence() noexcept
    {
        return ::sbepp::field_presence::required;
    }

    using primitive_type = ::std::uint16_t;
    
    static constexpr primitive_type min_value() noexcept
    {
        return value_type::min_value();
    }
    
    static constexpr primitive_type max_value() noexcept
    {
        return value_type::max_value();
    }

    
    static constexpr length_t length() noexcept
    {
        return 1;
    }
    
    static constexpr offset_t offset() noexcept
    {
        return {2};
    }

    
    static constexpr const char* semantic_type() noexcept
    {
        return "";
    }
    
    static constexpr version_t since_version() noexcept
    {
        return 0;
    }

    static constexpr const char* character_encoding() noexcept
    {
        return "";
    }

    
    using value_type = ::engine_schemas::detail::types::type_7;
};

template<>
class type_traits<::engine_schemas::schema::types::messageHeader::schemaId>
{
public:
    static constexpr const char* name() noexcept
    {
        return "schemaId";
    }

    static constexpr const char* description() noexcept
    {
        return "";
    }

    static constexpr field_presence presence() noexcept
    {
        return ::sbepp::field_presence::required;
    }

    using primitive_type = ::std::uint16_t;
    
    static constexpr primitive_type min_value() noexcept
    {
        return value_type::min_value();
    }
    
    static constexpr primitive_type max_value() noexcept
    {
        return value_type::max_value();
    }

    
    static constexpr length_t length() noexcept
    {
        return 1;
    }
    
    static constexpr offset_t offset() noexcept
    {
        return {4};
    }

    
    static constexpr const char* semantic_type() noexcept
    {
        return "";
    }
    
    static constexpr version_t since_version() noexcept
    {
        return 0;
    }

    static constexpr const char* character_encoding() noexcept
    {
        return "";
    }

    
    using value_type = ::engine_schemas::detail::types::type_8;
};

template<>
class type_traits<::engine_schemas::schema::types::messageHeader::version>
{
public:
    static constexpr const char* name() noexcept
    {
        return "version";
    }

    static constexpr const char* description() noexcept
    {
        return "";
    }

    static constexpr field_presence presence() noexcept
    {
        return ::sbepp::field_presence::required;
    }

    using primitive_type = ::std::uint16_t;
    
    static constexpr primitive_type min_value() noexcept
    {
        return value_type::min_value();
    }
    
    static constexpr primitive_type max_value() noexcept
    {
        return value_type::max_value();
    }

    
    static constexpr length_t length() noexcept
    {
        return 1;
    }
    
    static constexpr offset_t offset() noexcept
    {
        return {6};
    }

    
    static constexpr const char* semantic_type() noexcept
    {
        return "";
    }
    
    static constexpr version_t since_version() noexcept
    {
        return 0;
    }

    static constexpr const char* character_encoding() noexcept
    {
        return "";
    }

    
    using value_type = ::engine_schemas::detail::types::type_9;
};

template<>
class type_traits<::engine_schemas::schema::types::messageHeader::numGroups>
{
public:
    static constexpr const char* name() noexcept
    {
        return "numGroups";
    }

    static constexpr const char* description() noexcept
    {
        return "";
    }

    static constexpr field_presence presence() noexcept
    {
        return ::sbepp::field_presence::required;
    }

    using primitive_type = ::std::uint16_t;
    
    static constexpr primitive_type min_value() noexcept
    {
        return value_type::min_value();
    }
    
    static constexpr primitive_type max_value() noexcept
    {
        return value_type::max_value();
    }

    
    static constexpr length_t length() noexcept
    {
        return 1;
    }
    
    static constexpr offset_t offset() noexcept
    {
        return {8};
    }

    
    static constexpr const char* semantic_type() noexcept
    {
        return "";
    }
    
    static constexpr version_t since_version() noexcept
    {
        return 0;
    }

    static constexpr const char* character_encoding() noexcept
    {
        return "";
    }

    
    using value_type = ::engine_schemas::detail::types::type_10;
};

template<>
class type_traits<::engine_schemas::schema::types::messageHeader::numVarDataFields>
{
public:
    static constexpr const char* name() noexcept
    {
        return "numVarDataFields";
    }

    static constexpr const char* description() noexcept
    {
        return "";
    }

    static constexpr field_presence presence() noexcept
    {
        return ::sbepp::field_presence::required;
    }

    using primitive_type = ::std::uint16_t;
    
    static constexpr primitive_type min_value() noexcept
    {
        return value_type::min_value();
    }
    
    static constexpr primitive_type max_value() noexcept
    {
        return value_type::max_value();
    }

    
    static constexpr length_t length() noexcept
    {
        return 1;
    }
    
    static constexpr offset_t offset() noexcept
    {
        return {10};
    }

    
    static constexpr const char* semantic_type() noexcept
    {
        return "";
    }
    
    static constexpr version_t since_version() noexcept
    {
        return 0;
    }

    static constexpr const char* character_encoding() noexcept
    {
        return "";
    }

    
    using value_type = ::engine_schemas::detail::types::type_11;
};

template<>
class composite_traits<::engine_schemas::schema::types::messageHeader>
{
public:
    static constexpr const char* name() noexcept
    {
        return "messageHeader";
    }

    static constexpr const char* description() noexcept
    {
        return "";
    }

    

    static constexpr const char* semantic_type() noexcept
    {
        return "";
    }

    static constexpr version_t since_version() noexcept
    {
        return 0;
    }

    
    
    template<typename Byte>
    using value_type = ::engine_schemas::types::messageHeader<Byte>;


    static constexpr std::size_t size_bytes() noexcept
    {
        return 12;
    }
};

}  // namespace sbepp

SBEPP_WARNINGS_ON();
