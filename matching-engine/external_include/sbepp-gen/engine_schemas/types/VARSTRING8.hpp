// SPDX-License-Identifier: MIT
// Copyright (c) 2023, Oleksandr Koval

// This file was generated by sbeppc 1.1.0
#pragma once

#include <sbepp/sbepp.hpp>

SBEPP_WARNINGS_OFF();

#include "../schema/schema.hpp"


namespace engine_schemas
{
namespace detail
{
namespace types
{


class type_1
    : public ::sbepp::detail::required_base<::std::uint8_t, type_1>
{
public:
    using ::sbepp::detail::required_base<
        ::std::uint8_t, type_1>::required_base;

    static constexpr value_type min_value() noexcept
    {
        return {0};
    }

    static constexpr value_type max_value() noexcept
    {
        return {254};
    }
};

template<typename Byte>
using type_2 = ::sbepp::detail::static_array_ref<
    Byte, ::std::uint8_t, 0>;


template<typename Byte>
class composite_1 : public ::sbepp::detail::composite_base<Byte>
{
public:
    using ::sbepp::detail::composite_base<Byte>::composite_base;
    using ::sbepp::detail::composite_base<Byte>::operator();

    SBEPP_CPP20_CONSTEXPR ::engine_schemas::detail::types::type_1 length() const noexcept
    {
        return ::sbepp::detail::get_value<
            ::engine_schemas::detail::types::type_1, ::engine_schemas::detail::types::type_1::value_type, ::sbepp::endian::little>(*this, 0);
    }

    template<
        typename T = void,
        typename = ::sbepp::detail::enable_if_writable_t<Byte, T>>
    SBEPP_CPP20_CONSTEXPR void length(::engine_schemas::detail::types::type_1 v) const noexcept
    {
        ::sbepp::detail::set_value<::sbepp::endian::little>(*this, 0, v.value());
    }
    constexpr ::engine_schemas::detail::types::type_2<Byte> varData() const noexcept
    {
        return ::sbepp::detail::get_static_field_view<::engine_schemas::detail::types::type_2<Byte>>(
            *this, 1);
    }


    SBEPP_CPP20_CONSTEXPR std::size_t
        operator()(::sbepp::detail::size_bytes_tag) const noexcept
    {
        return 1;
    }

    template<typename Visitor, typename Cursor>
    SBEPP_CPP14_CONSTEXPR bool operator()(
        ::sbepp::detail::visit_tag, Visitor& v, Cursor&)
    {
        return v.template on_composite(*this, ::engine_schemas::schema::types::VARSTRING8{});
    }


    template<typename Visitor, typename Cursor>
    SBEPP_CPP14_CONSTEXPR bool operator()(
        ::sbepp::detail::visit_children_tag, Visitor& v, Cursor&)
    {
        (void)v;
        return v.template on_type(this->length(), ::engine_schemas::schema::types::VARSTRING8::length{})
||v.template on_type(this->varData(), ::engine_schemas::schema::types::VARSTRING8::varData{});
    }

};

} // namespace types
} // namespace detail

namespace types
{

    template<typename Byte>
    using VARSTRING8 = ::engine_schemas::detail::types::composite_1<Byte>;

} // namespace types
} // namespace engine_schemas

namespace sbepp
{

template<>
class type_traits<::engine_schemas::schema::types::VARSTRING8::length>
{
public:
    static constexpr const char* name() noexcept
    {
        return "length";
    }

    static constexpr const char* description() noexcept
    {
        return "";
    }

    static constexpr field_presence presence() noexcept
    {
        return ::sbepp::field_presence::required;
    }

    using primitive_type = ::std::uint8_t;
    
    static constexpr primitive_type min_value() noexcept
    {
        return value_type::min_value();
    }
    
    static constexpr primitive_type max_value() noexcept
    {
        return value_type::max_value();
    }

    
    static constexpr length_t length() noexcept
    {
        return 1;
    }
    
    static constexpr offset_t offset() noexcept
    {
        return {0};
    }

    
    static constexpr const char* semantic_type() noexcept
    {
        return "";
    }
    
    static constexpr version_t since_version() noexcept
    {
        return 0;
    }

    static constexpr const char* character_encoding() noexcept
    {
        return "";
    }

    
    using value_type = ::engine_schemas::detail::types::type_1;
};

template<>
class type_traits<::engine_schemas::schema::types::VARSTRING8::varData>
{
public:
    static constexpr const char* name() noexcept
    {
        return "varData";
    }

    static constexpr const char* description() noexcept
    {
        return "";
    }

    static constexpr field_presence presence() noexcept
    {
        return ::sbepp::field_presence::required;
    }

    using primitive_type = ::std::uint8_t;
    
    
    static constexpr length_t length() noexcept
    {
        return 0;
    }
    
    static constexpr offset_t offset() noexcept
    {
        return {1};
    }

    
    static constexpr const char* semantic_type() noexcept
    {
        return "";
    }
    
    static constexpr version_t since_version() noexcept
    {
        return 0;
    }

    static constexpr const char* character_encoding() noexcept
    {
        return "UTF-8";
    }

    
    
    template<typename Byte>
    using value_type = ::engine_schemas::detail::types::type_2<Byte>;

};

template<>
class composite_traits<::engine_schemas::schema::types::VARSTRING8>
{
public:
    static constexpr const char* name() noexcept
    {
        return "VARSTRING8";
    }

    static constexpr const char* description() noexcept
    {
        return "";
    }

    

    static constexpr const char* semantic_type() noexcept
    {
        return "";
    }

    static constexpr version_t since_version() noexcept
    {
        return 0;
    }

    
    
    template<typename Byte>
    using value_type = ::engine_schemas::types::VARSTRING8<Byte>;


    static constexpr std::size_t size_bytes() noexcept
    {
        return 1;
    }
};

}  // namespace sbepp

SBEPP_WARNINGS_ON();
